<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="14499"><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0138%" y="197" width="0.0207%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="3"/><text x="0.2638%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0138%" y="181" width="0.0207%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.2638%" y="191.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0138%" y="165" width="0.0207%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="3"/><text x="0.2638%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="0.0000%" y="213" width="0.0552%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="8"/><text x="0.2500%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.0345%" y="197" width="0.0207%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="3"/><text x="0.2845%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.0345%" y="181" width="0.0207%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="3"/><text x="0.2845%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0414%" y="165" width="0.0138%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="2"/><text x="0.2914%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0414%" y="149" width="0.0138%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="2"/><text x="0.2914%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.06%)</title><rect x="0.0000%" y="229" width="0.0621%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="9"/><text x="0.2500%" y="239.50"></text></g><g><title>[libpmix.so.2.9.2] (4 samples, 0.03%)</title><rect x="0.0621%" y="197" width="0.0276%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="4"/><text x="0.3121%" y="207.50"></text></g><g><title>event_base_loop (4 samples, 0.03%)</title><rect x="0.0621%" y="181" width="0.0276%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="4"/><text x="0.3121%" y="191.50"></text></g><g><title>[libevent_core-2.1.so.7.0.1] (4 samples, 0.03%)</title><rect x="0.0621%" y="165" width="0.0276%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="4"/><text x="0.3121%" y="175.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="0.0621%" y="229" width="0.0414%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="6"/><text x="0.3121%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="0.0621%" y="213" width="0.0414%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="6"/><text x="0.3121%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0897%" y="197" width="0.0138%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="2"/><text x="0.3397%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0897%" y="181" width="0.0138%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="2"/><text x="0.3397%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0897%" y="165" width="0.0138%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="2"/><text x="0.3397%" y="175.50"></text></g><g><title>mca_btl_sm_sendi (18 samples, 0.12%)</title><rect x="0.3862%" y="117" width="0.1241%" height="15" fill="rgb(210,31,41)" fg:x="56" fg:w="18"/><text x="0.6362%" y="127.50"></text></g><g><title>opal_convertor_pack (4 samples, 0.03%)</title><rect x="0.4828%" y="101" width="0.0276%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="4"/><text x="0.7328%" y="111.50"></text></g><g><title>mca_pml_ob1_send_inline.isra.0 (31 samples, 0.21%)</title><rect x="0.3173%" y="133" width="0.2138%" height="15" fill="rgb(226,26,5)" fg:x="46" fg:w="31"/><text x="0.5673%" y="143.50"></text></g><g><title>opal_convertor_prepare_for_send (3 samples, 0.02%)</title><rect x="0.5104%" y="117" width="0.0207%" height="15" fill="rgb(249,33,26)" fg:x="74" fg:w="3"/><text x="0.7604%" y="127.50"></text></g><g><title>mca_pml_ob1_rdma_btls (2 samples, 0.01%)</title><rect x="0.5518%" y="117" width="0.0138%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="2"/><text x="0.8018%" y="127.50"></text></g><g><title>mca_btl_sm_send (4 samples, 0.03%)</title><rect x="0.5794%" y="101" width="0.0276%" height="15" fill="rgb(221,5,38)" fg:x="84" fg:w="4"/><text x="0.8294%" y="111.50"></text></g><g><title>mca_pml_ob1_send_request_start_prepare (11 samples, 0.08%)</title><rect x="0.5656%" y="117" width="0.0759%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="11"/><text x="0.8156%" y="127.50"></text></g><g><title>sm_prepare_src (5 samples, 0.03%)</title><rect x="0.6069%" y="101" width="0.0345%" height="15" fill="rgb(241,131,45)" fg:x="88" fg:w="5"/><text x="0.8569%" y="111.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="0.6069%" y="85" width="0.0345%" height="15" fill="rgb(249,31,29)" fg:x="88" fg:w="5"/><text x="0.8569%" y="95.50"></text></g><g><title>mca_btl_sm_send (20 samples, 0.14%)</title><rect x="0.6759%" y="101" width="0.1379%" height="15" fill="rgb(225,111,53)" fg:x="98" fg:w="20"/><text x="0.9259%" y="111.50"></text></g><g><title>mca_pml_ob1_send_request_start_seq.constprop.0 (109 samples, 0.75%)</title><rect x="0.5311%" y="133" width="0.7518%" height="15" fill="rgb(238,160,17)" fg:x="77" fg:w="109"/><text x="0.7811%" y="143.50"></text></g><g><title>mca_pml_ob1_send_request_start_rndv (93 samples, 0.64%)</title><rect x="0.6414%" y="117" width="0.6414%" height="15" fill="rgb(214,148,48)" fg:x="93" fg:w="93"/><text x="0.8914%" y="127.50"></text></g><g><title>sm_prepare_src (68 samples, 0.47%)</title><rect x="0.8138%" y="101" width="0.4690%" height="15" fill="rgb(232,36,49)" fg:x="118" fg:w="68"/><text x="1.0638%" y="111.50"></text></g><g><title>[libc.so.6] (66 samples, 0.46%)</title><rect x="0.8276%" y="85" width="0.4552%" height="15" fill="rgb(209,103,24)" fg:x="120" fg:w="66"/><text x="1.0776%" y="95.50"></text></g><g><title>MPI_Isend (175 samples, 1.21%)</title><rect x="0.1241%" y="165" width="1.2070%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="175"/><text x="0.3741%" y="175.50"></text></g><g><title>mca_pml_ob1_isend (169 samples, 1.17%)</title><rect x="0.1655%" y="149" width="1.1656%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="169"/><text x="0.4155%" y="159.50"></text></g><g><title>opal_convertor_prepare_for_send (7 samples, 0.05%)</title><rect x="1.2828%" y="133" width="0.0483%" height="15" fill="rgb(254,191,54)" fg:x="186" fg:w="7"/><text x="1.5328%" y="143.50"></text></g><g><title>mca_pml_ob1_send_request_free (7 samples, 0.05%)</title><rect x="1.4001%" y="133" width="0.0483%" height="15" fill="rgb(241,83,37)" fg:x="203" fg:w="7"/><text x="1.6501%" y="143.50"></text></g><g><title>mca_btl_sm_send (482 samples, 3.32%)</title><rect x="8.9799%" y="53" width="3.3244%" height="15" fill="rgb(233,36,39)" fg:x="1302" fg:w="482"/><text x="9.2299%" y="63.50">mca..</text></g><g><title>[libc.so.6] (11,424 samples, 78.79%)</title><rect x="12.8078%" y="37" width="78.7916%" height="15" fill="rgb(226,3,54)" fg:x="1857" fg:w="11424"/><text x="13.0578%" y="47.50">[libc.so.6]</text></g><g><title>mca_pml_ob1_send_request_schedule_once (12,266 samples, 84.60%)</title><rect x="7.0074%" y="69" width="84.5989%" height="15" fill="rgb(245,192,40)" fg:x="1016" fg:w="12266"/><text x="7.2574%" y="79.50">mca_pml_ob1_send_request_schedule_once</text></g><g><title>sm_prepare_src (11,498 samples, 79.30%)</title><rect x="12.3043%" y="53" width="79.3020%" height="15" fill="rgb(238,167,29)" fg:x="1784" fg:w="11498"/><text x="12.5543%" y="63.50">sm_prepare_src</text></g><g><title>mca_pml_ob1_frag_completion (12,382 samples, 85.40%)</title><rect x="6.2556%" y="85" width="85.3990%" height="15" fill="rgb(232,182,51)" fg:x="907" fg:w="12382"/><text x="6.5056%" y="95.50">mca_pml_ob1_frag_completion</text></g><g><title>send_request_pml_complete (7 samples, 0.05%)</title><rect x="91.6063%" y="69" width="0.0483%" height="15" fill="rgb(231,60,39)" fg:x="13282" fg:w="7"/><text x="91.8563%" y="79.50"></text></g><g><title>mca_pml_ob1_send_request_copy_in_out (3 samples, 0.02%)</title><rect x="91.6891%" y="69" width="0.0207%" height="15" fill="rgb(208,69,12)" fg:x="13294" fg:w="3"/><text x="91.9391%" y="79.50"></text></g><g><title>mca_btl_sm_send (63 samples, 0.43%)</title><rect x="91.8270%" y="53" width="0.4345%" height="15" fill="rgb(235,93,37)" fg:x="13314" fg:w="63"/><text x="92.0770%" y="63.50"></text></g><g><title>mca_pml_ob1_recv_frag_callback_ack (1,176 samples, 8.11%)</title><rect x="91.6615%" y="85" width="8.1109%" height="15" fill="rgb(213,116,39)" fg:x="13290" fg:w="1176"/><text x="91.9115%" y="95.50">mca_pml_ob1..</text></g><g><title>mca_pml_ob1_send_request_schedule_once (1,169 samples, 8.06%)</title><rect x="91.7098%" y="69" width="8.0626%" height="15" fill="rgb(222,207,29)" fg:x="13297" fg:w="1169"/><text x="91.9598%" y="79.50">mca_pml_ob1..</text></g><g><title>sm_prepare_src (1,089 samples, 7.51%)</title><rect x="92.2615%" y="53" width="7.5109%" height="15" fill="rgb(206,96,30)" fg:x="13377" fg:w="1089"/><text x="92.5115%" y="63.50">sm_prepare..</text></g><g><title>[libc.so.6] (1,078 samples, 7.43%)</title><rect x="92.3374%" y="37" width="7.4350%" height="15" fill="rgb(218,138,4)" fg:x="13388" fg:w="1078"/><text x="92.5874%" y="47.50">[libc.so.6]</text></g><g><title>mca_btl_sm_component_progress (14,256 samples, 98.32%)</title><rect x="1.4691%" y="117" width="98.3240%" height="15" fill="rgb(250,191,14)" fg:x="213" fg:w="14256"/><text x="1.7191%" y="127.50">mca_btl_sm_component_progress</text></g><g><title>mca_btl_sm_poll_handle_frag (13,825 samples, 95.35%)</title><rect x="4.4417%" y="101" width="95.3514%" height="15" fill="rgb(239,60,40)" fg:x="644" fg:w="13825"/><text x="4.6917%" y="111.50">mca_btl_sm_poll_handle_frag</text></g><g><title>mca_pml_ob1_rndv_completion (2 samples, 0.01%)</title><rect x="99.7793%" y="85" width="0.0138%" height="15" fill="rgb(206,27,48)" fg:x="14467" fg:w="2"/><text x="100.0293%" y="95.50"></text></g><g><title>mca_part_persist_progress (3 samples, 0.02%)</title><rect x="99.7931%" y="117" width="0.0207%" height="15" fill="rgb(225,35,8)" fg:x="14469" fg:w="3"/><text x="100.0431%" y="127.50"></text></g><g><title>MPI_Waitall (14,282 samples, 98.50%)</title><rect x="1.3311%" y="165" width="98.5033%" height="15" fill="rgb(250,213,24)" fg:x="193" fg:w="14282"/><text x="1.5811%" y="175.50">MPI_Waitall</text></g><g><title>ompi_request_default_wait_all (14,277 samples, 98.47%)</title><rect x="1.3656%" y="149" width="98.4689%" height="15" fill="rgb(247,123,22)" fg:x="198" fg:w="14277"/><text x="1.6156%" y="159.50">ompi_request_default_wait_all</text></g><g><title>opal_progress (14,265 samples, 98.39%)</title><rect x="1.4484%" y="133" width="98.3861%" height="15" fill="rgb(231,138,38)" fg:x="210" fg:w="14265"/><text x="1.6984%" y="143.50">opal_progress</text></g><g><title>opal_progress_events.isra.0 (3 samples, 0.02%)</title><rect x="99.8138%" y="117" width="0.0207%" height="15" fill="rgb(231,145,46)" fg:x="14472" fg:w="3"/><text x="100.0638%" y="127.50"></text></g><g><title>opal_timer_linux_get_cycles_sys_timer (2 samples, 0.01%)</title><rect x="99.8207%" y="101" width="0.0138%" height="15" fill="rgb(251,118,11)" fg:x="14473" fg:w="2"/><text x="100.0707%" y="111.50"></text></g><g><title>PMPI_Recv (16 samples, 0.11%)</title><rect x="99.8345%" y="165" width="0.1104%" height="15" fill="rgb(217,147,25)" fg:x="14475" fg:w="16"/><text x="100.0845%" y="175.50"></text></g><g><title>mca_pml_ob1_recv (16 samples, 0.11%)</title><rect x="99.8345%" y="149" width="0.1104%" height="15" fill="rgb(247,81,37)" fg:x="14475" fg:w="16"/><text x="100.0845%" y="159.50"></text></g><g><title>opal_progress (14 samples, 0.10%)</title><rect x="99.8483%" y="133" width="0.0966%" height="15" fill="rgb(209,12,38)" fg:x="14477" fg:w="14"/><text x="100.0983%" y="143.50"></text></g><g><title>mca_btl_sm_component_progress (14 samples, 0.10%)</title><rect x="99.8483%" y="117" width="0.0966%" height="15" fill="rgb(227,1,9)" fg:x="14477" fg:w="14"/><text x="100.0983%" y="127.50"></text></g><g><title>mca_btl_sm_poll_handle_frag (2 samples, 0.01%)</title><rect x="99.9310%" y="101" width="0.0138%" height="15" fill="rgb(248,47,43)" fg:x="14489" fg:w="2"/><text x="100.1810%" y="111.50"></text></g><g><title>PMPI_Wtime (4 samples, 0.03%)</title><rect x="99.9448%" y="165" width="0.0276%" height="15" fill="rgb(221,10,30)" fg:x="14491" fg:w="4"/><text x="100.1948%" y="175.50"></text></g><g><title>clock_gettime (3 samples, 0.02%)</title><rect x="99.9517%" y="149" width="0.0207%" height="15" fill="rgb(210,229,1)" fg:x="14492" fg:w="3"/><text x="100.2017%" y="159.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.02%)</title><rect x="99.9517%" y="133" width="0.0207%" height="15" fill="rgb(222,148,37)" fg:x="14492" fg:w="3"/><text x="100.2017%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="99.9724%" y="165" width="0.0138%" height="15" fill="rgb(234,67,33)" fg:x="14495" fg:w="2"/><text x="100.2224%" y="175.50"></text></g><g><title>all (14,499 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="14499"/><text x="0.2500%" y="271.50"></text></g><g><title>osu_bw (14,499 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="14499"/><text x="0.2500%" y="255.50">osu_bw</text></g><g><title>_start (14,482 samples, 99.88%)</title><rect x="0.1172%" y="229" width="99.8828%" height="15" fill="rgb(213,79,30)" fg:x="17" fg:w="14482"/><text x="0.3672%" y="239.50">_start</text></g><g><title>__libc_start_main (14,482 samples, 99.88%)</title><rect x="0.1172%" y="213" width="99.8828%" height="15" fill="rgb(246,177,23)" fg:x="17" fg:w="14482"/><text x="0.3672%" y="223.50">__libc_start_main</text></g><g><title>[libc.so.6] (14,482 samples, 99.88%)</title><rect x="0.1172%" y="197" width="99.8828%" height="15" fill="rgb(230,62,27)" fg:x="17" fg:w="14482"/><text x="0.3672%" y="207.50">[libc.so.6]</text></g><g><title>main (14,482 samples, 99.88%)</title><rect x="0.1172%" y="181" width="99.8828%" height="15" fill="rgb(216,154,8)" fg:x="17" fg:w="14482"/><text x="0.3672%" y="191.50">main</text></g><g><title>omb_mpi_init (2 samples, 0.01%)</title><rect x="99.9862%" y="165" width="0.0138%" height="15" fill="rgb(244,35,45)" fg:x="14497" fg:w="2"/><text x="100.2362%" y="175.50"></text></g><g><title>MPI_Init (2 samples, 0.01%)</title><rect x="99.9862%" y="149" width="0.0138%" height="15" fill="rgb(251,115,12)" fg:x="14497" fg:w="2"/><text x="100.2362%" y="159.50"></text></g><g><title>ompi_mpi_init (2 samples, 0.01%)</title><rect x="99.9862%" y="133" width="0.0138%" height="15" fill="rgb(240,54,50)" fg:x="14497" fg:w="2"/><text x="100.2362%" y="143.50"></text></g><g><title>ompi_mpi_instance_init (2 samples, 0.01%)</title><rect x="99.9862%" y="117" width="0.0138%" height="15" fill="rgb(233,84,52)" fg:x="14497" fg:w="2"/><text x="100.2362%" y="127.50"></text></g><g><title>ompi_mpi_instance_init_common (2 samples, 0.01%)</title><rect x="99.9862%" y="101" width="0.0138%" height="15" fill="rgb(207,117,47)" fg:x="14497" fg:w="2"/><text x="100.2362%" y="111.50"></text></g></svg></svg>